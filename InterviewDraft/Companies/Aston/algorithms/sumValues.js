/**
 * Мы объявляем функцию sumValues(obj), которая принимает в качестве аргумента объект obj.
 * Внутри функции, мы инициализируем переменную sum для хранения суммы значений.
 * Затем, мы проходим по всем свойствам объекта obj с помощью цикла for ... in.
 * Для каждого свойства, мы проверяем его тип:
 * Если значение свойства является объектом (и не равно null), то мы делаем рекурсивный вызов sumValues() для вложенного объекта и добавляем его результат к сумме.
 * Если значение свойства является числом, то мы добавляем его к сумме.
 * Когда цикл завершается, переменная sum будет содержать сумму всех значений в объекте с учетом всех уровней вложенности.
 * В конце функции, мы возвращаем сумму sum.
 */
function sumValues(obj) {
  // Инициализируем переменную sum для хранения суммы значений
  let sum = 0;

  // Проходим по всем свойствам объекта obj с помощью цикла for...in
  for (let key in obj) {
    // Проверяем тип значения свойства
    if (typeof obj[key] === "object" && obj[key] !== null) {
      // Если значение свойства является объектом (и не равно null), то делаем рекурсивный вызов
      // sumValues() для вложенного объекта и добавляем его результат к сумме
      sum += sumValues(obj[key]);
    } else if (typeof obj[key] === "number") {
      // Если значение свойства является числом, то добавляем его к сумме
      sum += obj[key];
    }
  }

  // Возвращаем общую сумму всех значений в объекте
  return sum;
}

const data = {
  value: 12,
  s: {
    value: 1,
    p: {
      value: 3
    }
  }
};

const totalSum = sumValues(data);
console.log(totalSum); // Output: 16
/** **************************************************************************************************************** **/
/**
 * В этом решении мы используем стек stack, чтобы хранить объекты, которые нужно обработать.
 * Сначала мы помещаем в стек исходный объект obj.
 * Затем в цикле while извлекаем объекты из стека и проходим по их свойствам.
 * Если значение свойства является объектом и не равно null, мы добавляем его в стек для последующей обработки.
 * Если значение свойства является числом, то добавляем его к общей сумме sum.
 */
function sumValues2(obj) {
  // Инициализируем переменную sum для хранения общей суммы значений
  let sum = 0;

  // Инициализируем стек stack и добавляем в него исходный объект obj
  const stack = [obj];

  // Используем цикл while для обхода объектов в стеке
  while (stack.length > 0) {
    // Извлекаем объект из вершины стека
    const currentObj = stack.pop();

    // Проходим по всем свойствам объекта currentObj с помощью цикла for...in
    for (let key in currentObj) {
      // Проверяем тип значения свойства
      if (typeof currentObj[key] === "object" && currentObj[key] !== null) {
        // Если значение свойства является объектом (и не равно null), то добавляем его в стек для последующей обработки
        stack.push(currentObj[key]);
      } else if (typeof currentObj[key] === "number") {
        // Если значение свойства является числом, то добавляем его к общей сумме sum
        sum += currentObj[key];
      }
    }
  }

  // Возвращаем общую сумму всех значений в объекте
  return sum;
}

const data2 = {
  value: 12,
  s: {
    value: 1,
    p: {
      value: 3
    }
  }
};

const totalSum2 = sumValues2(data2);
console.log(totalSum2); // Output: 16
