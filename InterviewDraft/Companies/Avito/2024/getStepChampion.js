/**
 * –ß–µ–º–ø–∏–æ–Ω–∞—Ç –ø–æ —à–∞–≥–∞–º
 *
 * –£—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏
 * –ú—ã –≤ –ê–≤–∏—Ç–æ –ª—é–±–∏–º –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è, ‚Äî –Ω–µ–¥–∞–≤–Ω–æ –º—ã —É—Å—Ç—Ä–æ–∏–ª–∏ —á–µ–º–ø–∏–æ–Ω–∞—Ç –ø–æ —à–∞–≥–∞–º. –ò –≤–æ—Ç –Ω–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –ø–æ–¥–≤–æ–¥–∏—Ç—å –∏—Ç–æ–≥–∏!
 * –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å userIds —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏ –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ steps –∑–∞ –≤—Å–µ –¥–Ω–∏,
 * –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–≤ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–Ω—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π.
 *
 * –°–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏: ùëÇ (ùëõ ‚ãÖ ùëò) O(n‚ãÖk) ‚Äî –ª–∏–Ω–µ–π–Ω–∞—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–Ω–µ–π –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
 * –°–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ –ø–∞–º—è—Ç–∏: ùëÇ (ùëõ ‚ãÖ ùëò) O(n‚ãÖk), —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–∂–¥–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è.
 */

const getStepChampion = (statistics) => {
    const champions = { userIds: [], steps: 0 };
    const map = {};
    const totalDays = statistics.length;

    for (let i = 0; i < statistics.length; i++) {
        const currDay = statistics[i];

        // –ï—Å–ª–∏ –¥–µ–Ω—å –ø—É—Å—Ç–æ–π, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∫—Ç–æ-—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª –¥–µ–Ω—å
        if (currDay.length === 0) {
            return champions; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        }

        currDay.forEach(curr => {
            if (!map[curr.userId]) {
                // –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –µ—â–µ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ map
                map[curr.userId] = {
                    steps: curr.steps,
                    days: 1
                };
            } else {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –∏ –¥–Ω–µ–π
                map[curr.userId].steps += curr.steps;
                map[curr.userId].days += 1;
            }
        });
    }

    let maxSteps = 0;

    for (let userId in map) {
        const user = map[userId];

        // –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤–æ –≤—Å–µ—Ö –¥–Ω—è—Ö
        if (user.days === totalDays) {
            if (user.steps > maxSteps) {
                // –ù–æ–≤—ã–π —á–µ–º–ø–∏–æ–Ω
                maxSteps = user.steps;
                champions.userIds = [parseInt(userId)];
                champions.steps = user.steps;
            } else if (user.steps === maxSteps) {
                // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å —Ç–∞–∫–∏–º –∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —à–∞–≥–æ–≤
                champions.userIds.push(parseInt(userId));
            }
        }
    }

    return champions;
};

// –ü—Ä–∏–º–µ—Ä—ã
const statistics1 = [
    [{ userId: 1, steps: 5000 }, { userId: 2, steps: 1500 }],
    [{ userId: 2, steps: 1000 }]
];
console.log(getStepChampion(statistics1)); // { userIds: [2], steps: 2500 }

const statistics2 = [
    [{ userId: 1, steps: 2000 }, { userId: 2, steps: 1500 }],
    [{ userId: 1, steps: 3500 }, { userId: 2, steps: 4000 }]
];
console.log(getStepChampion(statistics2)); // { userIds: [1, 2], steps: 5500 }

const statistics3 = [
    [],
    [{ userId: 1, steps: 2000 }, { userId: 2, steps: 1500 }],
    [{ userId: 2, steps: 4000 }, { userId: 1, steps: 3500 }]
];
console.log(getStepChampion(statistics3)); // { userIds: [], steps: 0 }
