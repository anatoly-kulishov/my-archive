const filterArrayByArray = (first, second) => {
    let newArray = [];

    for (let k = 0; k < second.length; k++) {
        for (let i = 0; i < first.length; i++) {
            if (first[i].code === second[k]) {
                newArray.push(first[i]);
                break; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ü–∏–∫–ª, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ –¥—É–±–ª–µ–π
            }
        }
    }

    return newArray;
};

const a = [{ code: 0 }, { code: 1 }, { code: 2 }, { code: 3 }, { code: 4 }];
const b = [0, 3, 4];

console.log(filterArrayByArray(a, b));// –†–µ–∑—É–ª—å—Ç–∞—Ç: [ { code: 0 }, { code: 3 }, { code: 4 } ]

// O(m√ón), m ‚Äî –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ first, n ‚Äî –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ second.
const filterArrayByArray2 = (first, second) => {
    const secondSet = new Set(second); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ç–æ—Ä–æ–π –º–∞—Å—Å–∏–≤ –≤ Set –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    return first.filter(item => secondSet.has(item.code));
};

// –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ: –≠—Ç–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –≤ –±–æ–ª—å—à–∏—Ö –º–∞—Å—Å–∏–≤–∞—Ö, —Ç–∞–∫ –∫–∞–∫ –∏–∑–±–µ–≥–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤.
const filterArrayByArray3 = (first, second) => {
    const secondSet = new Set(second); // –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const result = [];
    for (let item of first) {
        if (secondSet.has(item.code)) {
            result.push(item);
        }
    }
    return result;
};

// –ë—ã—Å—Ç—Ä–æ–¥–µ–π—Å—Ç–≤–∏–µ: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤, —Ç–∞–∫ –∫–∞–∫ –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á—É –≤ –æ–±—ä–µ–∫—Ç–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞ ùëÇ(1)
const filterArrayByArray4 = (first, second) => {
    const lookup = {}; // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ `second`
    second.forEach(code => {
        lookup[code] = true; // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ `second` –∫–∞–∫ –∫–ª—é—á –æ–±—ä–µ–∫—Ç–∞
    });

    return first.filter(item => lookup[item.code]); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ `item.code` –≤ –æ–±—ä–µ–∫—Ç–µ
};