/**
 * Фабричный метод — это порождающий паттерн проектирования,
 * который определяет общий интерфейс для создания объектов в суперклассе,
 * позволяя подклассам изменять тип создаваемых объектов.
 *
 * Преимущества:
 * 1) Избавляет класс от привязки к конкретным классам продуктов.
 * 2) Выделяет код производства продуктов в одно место, упрощая поддержку кода.
 * 3) Упрощает добавление новых продуктов в программу.
 * 4) Реализует принцип открытости/закрытости.
 *
 * Недостатки:
 * 1) Может привести к созданию больших параллельных иерархий классов, так как для каждого класса продукта надо создать свой подкласс создателя.
 */

class Bmw {
  constructor(model, price, maxSpeed) {
    this.model = model;
    this.price = price;
    this.maxSpeed = maxSpeed;
  }
}

class BmwFactory {
  create(type) {
    if (type === 'X5')
      return new Bmw(type, 108000, 300);
    if (type === 'X6')
      return new Bmw(type, 111000, 320);
  }
}

const X5 = new BmwFactory().create('X5');
/**
 * ┌──────────┬────────┐
 * │ (index)  │ Values │
 * ├──────────┼────────┤
 * │  model   │  'X5'  │
 * │  price   │ 108000 │
 * │ maxSpeed │  300   │
 * └──────────┴────────┘
 */
console.table(X5);

const X6 = new BmwFactory().create('X6');
/**
 * ┌──────────┬────────┐
 * │ (index)  │ Values │
 * ├──────────┼────────┤
 * │  model   │  'X6'  │
 * │  price   │ 111000 │
 * │ maxSpeed │  320   │
 * └──────────┴────────┘
 */
console.table(X6);
